-- this file contains tests for GROUP BY with combinations of following
-- 1. enable_hashagg = on/off (to force the grouping by sorting)
-- 2. distributed or replicated tables across the datanodes
-- If a testcase is added to any of the combinations, please check if it's
-- applicable in other combinations as well.
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((pg_catalog.sum((sum(xc_groupby_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4  
(7 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Hash Full Join
         Output: xc_groupby_tab1.val, xc_groupby_tab1.val2, xc_groupby_tab2.val, xc_groupby_tab2.val2
         Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Data Node Scan on xc_groupby_tab1
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true
         ->  Hash
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               ->  Data Node Scan on xc_groupby_tab2
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true
(13 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((pg_catalog.sum((sum(xc_groupby_tab1.val))))), ((xc_groupby_tab1.val2 % 2))
   ->  HashAggregate
         Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
         ->  Materialize
               Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
               ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Remote query: SELECT sum(group_1.val), (group_1.val2 % 2), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3  
(9 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_tab1.val2
   ->  Materialize
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_tab1.val2
               Remote query: SELECT group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1  
(7 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        4
        7
        3
        8
        9
        2
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
               Remote query: SELECT (group_1.val + group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1  
(7 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        7 |   4 |    3
        4 |   3 |    1
        4 |   2 |    2
        3 |   2 |    1
        4 |   1 |    3
        2 |   1 |    1
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT (group_1.val + group_1.val2), group_1.val, group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 2, 3  
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        5 |   3 |    2
        5 |   4 |    1
        6 |   4 |    2
        6 |   2 |    4
        2 |   1 |    1
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1), group_2.val_1_1_1, group_2.val2_2_2_1  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 2, 3  
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        6
        2
        7
        5
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                                                                                                                                              QUERY PLAN                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1)  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 1  
(7 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_groupby_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_groupby_tab1.val)))), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4  
(7 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
  11 | 3.6666666666666667 |        6
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
               Remote query: SELECT sum(group_1.val), avg(group_1.val), (2 * group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3  
(7 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate
   Output: a, count(a)
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result
               Output: a
               ->  Data Node Scan on xc_groupby_def
                     Output: a, b
                     Remote query: SELECT a, b FROM ONLY xc_groupby_def WHERE true
(10 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
    10.0000000000000000
     7.0000000000000000
     3.0000000000000000
     4.0000000000000000
(11 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
    10.0000000000000000
     7.0000000000000000
     3.0000000000000000
     4.0000000000000000
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
 4.0000000000000000
                   
 4.5000000000000000
 6.2000000000000000
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
   8
    
  18
  31
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT sum(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     3
     1
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     1
     1
     1
     2
     1
     1
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.a
               Remote query: SELECT count(*), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (a IS NOT NULL)) group_1 GROUP BY 2  
(7 rows)

select b from xc_groupby_def group by b;
   b   
-------
 
 One
 Two
 Three
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_def.b
   ->  Materialize
         Output: xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b
               Remote query: SELECT group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1  
(7 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
       |     0
 One   |     1
 Two   |     4
 Three |     5
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
               Remote query: SELECT group_1.b, count(group_1.b)  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1  
(7 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (b IS NULL)) group_1 GROUP BY 2  
(7 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
               Remote query: SELECT sum(group_1.a), group_1.a  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
               Remote query: SELECT sum(group_1.b), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
               Remote query: SELECT sum(group_1.c), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
     2.0000000000000000
 1.00000000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.3
 2.1
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
               Remote query: SELECT avg(group_1.b), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 5.2000000000000000
 3.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
               Remote query: SELECT avg(group_1.c), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((pg_catalog.sum((sum(xc_groupby_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4  
(7 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Hash Full Join
         Output: xc_groupby_tab1.val, xc_groupby_tab1.val2, xc_groupby_tab2.val, xc_groupby_tab2.val2
         Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Data Node Scan on xc_groupby_tab1
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true
         ->  Hash
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               ->  Data Node Scan on xc_groupby_tab2
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true
(13 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((pg_catalog.sum((sum(xc_groupby_tab1.val))))), ((xc_groupby_tab1.val2 % 2))
   ->  HashAggregate
         Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
         ->  Materialize
               Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
               ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Remote query: SELECT sum(group_1.val), (group_1.val2 % 2), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3  
(9 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_tab1.val2
   ->  Materialize
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_tab1.val2
               Remote query: SELECT group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1  
(7 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        4
        3
        7
        8
        9
        2
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
               Remote query: SELECT (group_1.val + group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1  
(7 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        7 |   4 |    3
        4 |   3 |    1
        4 |   2 |    2
        4 |   1 |    3
        3 |   2 |    1
        2 |   1 |    1
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT (group_1.val + group_1.val2), group_1.val, group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 2, 3  
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        5 |   3 |    2
        5 |   4 |    1
        6 |   4 |    2
        2 |   1 |    1
        6 |   2 |    4
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1), group_2.val_1_1_1, group_2.val2_2_2_1  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 2, 3  
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        6
        2
        7
        5
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                                                                                                                                              QUERY PLAN                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1)  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 1  
(7 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_groupby_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_groupby_tab1.val)))), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4  
(7 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
  11 | 3.6666666666666667 |        6
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
               Remote query: SELECT sum(group_1.val), avg(group_1.val), (2 * group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3  
(7 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate
   Output: a, count(a)
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result
               Output: a
               ->  Data Node Scan on xc_groupby_def
                     Output: a, b
                     Remote query: SELECT a, b FROM ONLY xc_groupby_def WHERE true
(10 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
     3.0000000000000000
    10.0000000000000000
     7.0000000000000000
     4.0000000000000000
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a; 
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
     3.0000000000000000
    10.0000000000000000
     7.0000000000000000
     4.0000000000000000
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
 4.0000000000000000
                   
 4.5000000000000000
 6.2000000000000000
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
   8
    
  18
  31
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT sum(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     3
     1
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2  
(7 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     1
     1
     1
     1
     1
     2
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.a
               Remote query: SELECT count(*), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (a IS NOT NULL)) group_1 GROUP BY 2  
(7 rows)

select b from xc_groupby_def group by b;
   b   
-------
 
 One
 Two
 Three
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_def.b
   ->  Materialize
         Output: xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b
               Remote query: SELECT group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1  
(7 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
       |     0
 One   |     1
 Two   |     4
 Three |     5
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
               Remote query: SELECT group_1.b, count(group_1.b)  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1  
(7 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (b IS NULL)) group_1 GROUP BY 2  
(7 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
               Remote query: SELECT sum(group_1.a), group_1.a  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
               Remote query: SELECT sum(group_1.b), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
               Remote query: SELECT sum(group_1.c), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
     2.0000000000000000
 1.00000000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.3
 2.1
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
               Remote query: SELECT avg(group_1.b), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 5.2000000000000000
 3.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
               Remote query: SELECT avg(group_1.c), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2  
(7 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((pg_catalog.sum((sum(xc_groupby_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4 ORDER BY 4 
(7 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Hash Full Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
               Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Data Node Scan on xc_groupby_tab1
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true
               ->  Hash
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Data Node Scan on xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                           Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true
(16 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   ->  Sort
         Output: q1.y, q1.x
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.y, q1.x
               ->  GroupAggregate
                     Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                     ->  Materialize
                           Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                           ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
                                 Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                                 Remote query: SELECT sum(group_1.val), (group_1.val2 % 2), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3 ORDER BY 3 
(14 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: xc_groupby_tab1.val2
   ->  Materialize
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_tab1.val2
               Remote query: SELECT group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
               Remote query: SELECT (group_1.val + group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT (group_1.val + group_1.val2), group_1.val, group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 2, 3 ORDER BY 2, 3 
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1), group_2.val_1_1_1, group_2.val2_2_2_1  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 2, 3 ORDER BY 2, 3 
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1)  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 1 ORDER BY 1 
(7 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_groupby_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_groupby_tab1.val)))), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4 ORDER BY 4 
(7 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
               Remote query: SELECT sum(group_1.val), avg(group_1.val), (2 * group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3 ORDER BY 3 
(7 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate
   Output: a, count(a)
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result
               Output: a
               ->  Data Node Scan on xc_groupby_def
                     Output: a, b
                     Remote query: SELECT a, b FROM ONLY xc_groupby_def WHERE true
(10 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
                   
 6.2000000000000000
 4.5000000000000000
 4.0000000000000000
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
    
  31
  18
   8
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT sum(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.a
               Remote query: SELECT count(*), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (a IS NOT NULL)) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select b from xc_groupby_def group by b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: xc_groupby_def.b
   ->  Materialize
         Output: xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b
               Remote query: SELECT group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
               Remote query: SELECT group_1.b, count(group_1.b)  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (b IS NULL)) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
               Remote query: SELECT sum(group_1.a), group_1.a  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
               Remote query: SELECT sum(group_1.b), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
               Remote query: SELECT sum(group_1.c), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
               Remote query: SELECT avg(group_1.b), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
               Remote query: SELECT avg(group_1.c), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((pg_catalog.sum((sum(xc_groupby_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4 ORDER BY 4 
(7 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Hash Full Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
               Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Data Node Scan on xc_groupby_tab1
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true
               ->  Hash
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Data Node Scan on xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                           Remote query: SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true
(16 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   ->  Sort
         Output: q1.y, q1.x
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.y, q1.x
               ->  GroupAggregate
                     Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                     ->  Materialize
                           Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                           ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
                                 Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                                 Remote query: SELECT sum(group_1.val), (group_1.val2 % 2), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3 ORDER BY 3 
(14 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: xc_groupby_tab1.val2
   ->  Materialize
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_tab1.val2
               Remote query: SELECT group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
               Remote query: SELECT (group_1.val + group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
               Remote query: SELECT (group_1.val + group_1.val2), group_1.val, group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 2, 3 ORDER BY 2, 3 
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1), group_2.val_1_1_1, group_2.val2_2_2_1  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 2, 3 ORDER BY 2, 3 
(7 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Remote query: SELECT (group_2.val_1_1_1 + group_2.val2_2_2_1)  FROM (SELECT in_1.val AS val_1_1_1, out_1.val2 AS val2_2_2_1 FROM  (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) in_1  ,  (SELECT val, val2 FROM ONLY xc_groupby_tab2 WHERE true) out_1  WHERE   (in_1.val = out_1.val)) group_2 GROUP BY 1 ORDER BY 1 
(7 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_groupby_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_groupby_tab1.val)))), xc_groupby_tab1.val2
   ->  Materialize
         Output: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), xc_groupby_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), xc_groupby_tab1.val2
               Remote query: SELECT count(*), sum(group_1.val), avg(group_1.val), group_1.val2  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 4 ORDER BY 4 
(7 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
               Remote query: SELECT sum(group_1.val), avg(group_1.val), (2 * group_1.val2)  FROM (SELECT val, val2 FROM ONLY xc_groupby_tab1 WHERE true) group_1 GROUP BY 3 ORDER BY 3 
(7 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate
   Output: a, count(a)
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result
               Output: a
               ->  Data Node Scan on xc_groupby_def
                     Output: a, b
                     Remote query: SELECT a, b FROM ONLY xc_groupby_def WHERE true
(10 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a; 
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
               Remote query: SELECT avg(group_1.a), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
                   
 6.2000000000000000
 4.5000000000000000
 4.0000000000000000
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
    
  31
  18
   8
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
               Remote query: SELECT sum(group_1.a), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.a
               Remote query: SELECT count(*), group_1.a  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (a IS NOT NULL)) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select b from xc_groupby_def group by b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: xc_groupby_def.b
   ->  Materialize
         Output: xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b
               Remote query: SELECT group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
               Remote query: SELECT group_1.b, count(group_1.b)  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE true) group_1 GROUP BY 1 ORDER BY 1 
(7 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: count(*), xc_groupby_def.b
               Remote query: SELECT count(*), group_1.b  FROM (SELECT a, b FROM ONLY xc_groupby_def WHERE (b IS NULL)) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
               Remote query: SELECT sum(group_1.a), group_1.a  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
               Remote query: SELECT sum(group_1.b), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
               Remote query: SELECT sum(group_1.c), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
               Remote query: SELECT avg(group_1.a), group_1.b  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
               Remote query: SELECT avg(group_1.b), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
               Remote query: SELECT avg(group_1.c), group_1.c  FROM (SELECT a, b, c FROM ONLY xc_groupby_g WHERE true) group_1 GROUP BY 2 ORDER BY 2 
(7 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
